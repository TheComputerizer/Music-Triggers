plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

minecraft {
    mappings channel: 'parchment', version: "${project.parchment_version}-${project.minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        def mixinStuff = [
                '-Dmixin.debug.export=true',
                '-Dmixin.hotSwap=true',
                '-Dmixin.checks.interfaces=true',
                '-mixin.config="musictriggers.mixin.json"'
        ]
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                musictriggers {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                musictriggers {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                musictriggers {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }
    maven {
        url = uri("https://jitpack.io")
    }
    /*flatDir {
        dirs 'build/libs'
    }*/
}

configurations {
    shade
    minecraftLibrary.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    //external dependencies
    shade("io.github.kostaskougios:cloning:${project.cloning_version}")
    shade("com.github.walkyst:lavaplayer-fork:${project.lava_version}") {
        exclude module: 'commons-io'
        exclude module: 'commons-codec'
    }

    //required mod dependencies
    implementation(fg.deobf("maven.modrinth:the-impossible-library:${project.minecraft_version}-${project.lib_version}"))
    //local versions of required dependencies for testing
    //noinspection DependencyNotationArgument
    //implementation(name: "theimpossiblelibrary-${project.minecraft_version}-${project.lib_version}")

    //mixin
    annotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")

    //mods
    implementation fg.deobf("curse.maven:game-stages-268655:${project.gamestages_version}")
    implementation(fg.deobf("curse.maven:enhanced-celestials-438447:${project.celestials_version}"))
    implementation fg.deobf("curse.maven:atomicstrykers-infernal-mobs-227875:${project.infernal_version}")
    implementation fg.deobf("curse.maven:serene-seasons-291874:${project.seasons_version}")
    implementation(fg.deobf("curse.maven:blue-skies-312918:${project.blueskies_version}"))

    runtimeOnly(fg.deobf("curse.maven:bookshelf-228525:${project.bookshelf_version}"))
    runtimeOnly(fg.deobf("curse.maven:jei-238222:${project.jei_version}"))
    runtimeOnly(fg.deobf("curse.maven:structure-gel-378802:${project.gel_version}"))
}

shadowJar {
    //necessary relocation
    relocate 'org.apache.commons.codec', "${shadow_group}.apache.commons.codec"
    relocate 'org.apache.commons.logging', "${shadow_group}.apache.commons.logging"
    relocate 'org.apache.http', "${shadow_group}.apache.http"
    relocate 'org.jsoup', "${shadow_group}.jsoup"
    relocate 'org.objenesis', "${shadow_group}.objenesis"
    relocate 'org.slf4j', "${shadow_group}.slf4j"
    relocate 'net.iharder', "${shadow_group}.iharder"
    relocate 'mozilla', "${shadow_group}"
    relocate 'com.fasterxml', "${shadow_group}.fasterxml"
    relocate 'com.rits', "${shadow_group}.rits"
    relocate 'certificates', "${shadow_group}"
    configurations = [project.configurations.shadow]
    setArchiveClassifier('')
    mergeServiceFiles()
}


reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

mixin {
    add sourceSets.main, "musictriggers.refmap.json"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
}

jar {
    manifest {
        attributes([
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "musictriggers.mixin.json"
        ])
    }
}

tasks.assemble.dependsOn('shadowJar')
tasks.shadowJar.dependsOn('reobfJar')
tasks.jar.finalizedBy('reobfJar')