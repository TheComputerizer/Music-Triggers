plugins {
	id 'fabric-loom' version '1.2.+'
	id 'com.github.johnrengelman.shadow' version '8.1.+'
}

version = "${project.minecraft_version}-fabric-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

repositories {
	maven {
		name 'ParchmentMC'
		url = uri('https://maven.parchmentmc.org')
	}
	maven {
		url = 'https://www.cursemaven.com'
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {
		url = uri("https://m2.dv8tion.net/releases")
	}
	maven {
		url = uri("https://jitpack.io")
	}
}

configurations {
	shade
	implementation.extendsFrom(shade)
	shadow.extendsFrom shade
	shade.transitive = true
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//3rd party dependencies
	shade("io.github.kostaskougios:cloning:${project.cloning_version}")
	shade("com.github.walkyst:lavaplayer-fork:${project.lava_version}") {
		exclude module: 'commons-io'
		exclude module: 'commons-codec'
	}
	implementation("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {
		exclude group: 'com.google.code.gson', module: 'gson'
	}

	modImplementation "maven.modrinth:the-impossible-library:${project.minecraft_version}-fabric-${project.lib_version}"
	modImplementation "curse.maven:cloth-config-319057:${project.cloth_version}"
	modImplementation "curse.maven:modmenu-308702:${project.modmenu_version}"
}

shadowJar {
	//necessary relocation
	relocate 'org.apache.commons.codec', "${shadow_group}.apache.commons.codec"
	relocate 'org.apache.commons.logging', "${shadow_group}.apache.commons.logging"
	relocate 'org.apache.http', "${shadow_group}.apache.http"
	relocate 'org.jsoup', "${shadow_group}.jsoup"
	relocate 'org.objenesis', "${shadow_group}.objenesis"
	relocate 'org.slf4j', "${shadow_group}.slf4j"
	relocate 'net.iharder', "${shadow_group}.iharder"
	relocate 'mozilla', "${shadow_group}"
	relocate 'com.fasterxml', "${shadow_group}.fasterxml"
	relocate 'com.rits', "${shadow_group}.rits"
	relocate 'certificates', "${shadow_group}"
	configurations = [project.configurations.shadow]
	setArchiveClassifier('shaded')
	mergeServiceFiles()
}

remapJar {
	inputFile = tasks.shadowJar.archiveFile
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

loom {
	accessWidenerPath = file("src/main/resources/musictriggers.accesswidener")
}

jar {
	from("LICENSE")
	setArchiveClassifier('shaded')
}

tasks.remapJar.dependsOn('shadowJar')
tasks.jar.finalizedBy('remapJar')