plugins {
	id 'fabric-loom' version '1.2.+'
}

version = "${project.minecraft_version}-fabric-${project.mod_version}"
group = project.maven_group
archivesBaseName = project.base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(17))

repositories {
	maven {
		name 'ParchmentMC'
		url = uri('https://maven.parchmentmc.org')
	}
	maven {
		url = 'https://www.cursemaven.com'
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {
		url = uri("https://m2.dv8tion.net/releases")
	}
	maven {
		url = uri("https://jitpack.io")
	}
	flatDir {
		dirs 'build/libs'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//3rd party dependencies
	include (implementation("io.github.kostaskougios:cloning:${project.cloning_version}"))
	include (implementation("com.github.walkyst:lavaplayer-fork:${project.lava_version}"))
	implementation("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {
		exclude group: 'com.google.code.gson', module: 'gson'
	}

	//3rd party recursive dependencies
	include (implementation("com.sedmelluq:lava-common:${project.lava_common_version}"))
	include (implementation("com.github.walkyst:lavaplayer-natives-fork:${project.lava_natives_version}"))
	include (implementation("com.github.walkyst.JAADec-fork:jaadec-ext-aac:${project.lava_jaadec_version}"))
	include (implementation("org.objenesis:objenesis:${project.objenesis_version}"))
	include (implementation("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"))
	include (implementation("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"))
	include (implementation("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"))
	include (implementation("org.apache.commons:commons-lang3:${project.commons_version}"))

	//mods
	//local versions of required dependencies for testing
	//noinspection DependencyNotationArgument
	//modImplementation(name: "theimpossiblelibrary-${project.minecraft_version}-fabric-${project.lib_version}")
	modImplementation "maven.modrinth:the-impossible-library:${project.minecraft_version}-fabric-${project.lib_version}"
	modImplementation "curse.maven:cloth-config-319057:${project.cloth_version}"
	modImplementation "curse.maven:modmenu-308702:${project.modmenu_version}"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

loom {
	accessWidenerPath = file("src/main/resources/musictriggers.accesswidener")
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
